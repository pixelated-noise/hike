#+title: Sherpa
#+subtitle: Pathfinding between spatial and topological domains
#+options: toc:nil
#+options: date:nil
#+property: header-args:clojure :session :exports code :results silent

* Rationale
  A common feature of end-user applications is the manipulation of UI cells
  holding interdependent data. The cells are almost always arranged in a
  spatial domain of some number of dimensions (an 1-d list, a 2-d spreadsheet
  grid, etc.). Users also sometimes expect to be able to define data segments
  (contiguous spatial regions, also referred to as slices), which behave
  "naturally" when doing/undoing spatial operations (inserting, deleting and
  moving cells around). Furthermore, individual cells as well as slices must
  always retain their identity during all these operations so that
  computational dependencies can be defined among them. Sherpa is a library
  providing a bidirectional mapping between spatial and topological domains,
  supporting such applications in an efficient and backend/frontend-agnostic
  manner.

* Problem statement and solution sketch
  To facilitate understanding and communication of ideas, we'll begin by
  focusing the discussion to a single-dimensional spreadsheet. The user is
  able to not only add/modify data, but also define computational dependencies
  between cells (individual and slices), such that a modification of data
  triggers appropriate updates on downstream (dependent) cells. To serve the
  application, the mapping component between the spatial and topological
  domains needs to fulfill the following requirements:

  1. Provide a way to identify graph nodes, so that relations like "node
     ~<id-2>~ is the sum of the nodes between ~<id-0>~ and ~<id-1>~" can be
     expressed.

  2. Query node id by cell position and vice versa (detecting deleted cells).

  3. Perform spatial operations in the UI, such that cells inserted into a
     slice are included in it and cells deleted are excluded from it. Moving
     cells around preserves cell data and behaves accordingly with respect to
     slices.

  4. Support undoing spatial operations.

  5. Support an arbitrary number of spatial dimensions.

  A straightforward approach would be to use UUIDs and cell/node records. When
  a cell is first assigned data, we create a record storing its data and
  position, along with a fresh UUID as node id. From then on, we update the
  data and position each time they change. Data modification can be either
  direct (by the user) or derived (by a recomputation event cascade). We have
  to keep in mind though, direct update messages will contain references from
  the spatial domain ("data of cell at position 3 changed to ~<data>~"),
  whereas derived update messages will contain references to the topological
  domain ("data of node ~<id>~ changed to ~<data>~"). We will therefore need
  to maintain two indexes over the records -- by node id and cell position --
  if we are to access them fast in both cases; of which the second one must be
  updated every time a spatial operation is performed.

  But we can do better. As usual, new perspectives and approaches may be
  unveiled by temporarily lifting restrictions and requirements. For example,
  let's assume for a moment that cell positions are fixed. We can get rid of
  the second (position) index, if we assign node ids using an one-to-one
  function from cell positions to node ids [fn:: To be more precise, we need
  an injective, non-surjective function, since nodes of deleted cells are not
  represented in the spatial domain. For more information, see [[https://en.wikipedia.org/wiki/Injective_function][Wikipedia]].]. Of
  course, in the presence of spatial operations, a more sophisticated scheme
  is required: after inserting, say, 10 new cells at position 3, the cell at
  position 5 is different than the one that was there before. However, we can
  still take advantage of the highly structured effect of spatial operations
  to adopt a procedural representation for them. Thus, assuming we have an
  identifying initial position for every cell, we can model spatial operations
  via a stack of procedural transformations (akin to OpenGL transformation
  matrix stack). Let's see how the implementation of this idea plays out!

* Layouts, paths and transformations

  Spatial operations essentially take us from a cell layout to a new one. We
  can therefore extract a transformation between these layouts for any spatial
  operation. In this section we'll discuss about fundamental, low-level
  transformations (insert, delete and move) and the cell paths through layouts
  that they express. We can think of the transformation stack as in the
  following diagram:
  #+begin_src text
to-graph
   Î›
   |  |  ------------------> layout-0 (original)
   |  |  transformation-0
   |  |  ------------------> layout-1
   |  |  transformation-1
   |  |  ------------------> layout-2
   |  |  transformation-2
   |  |  ------------------> layout-3 (user-visible)
      V
   to-grid
  #+end_src
  The user is at first presented with the original ~layout-0~. If they perform
  some spatial operation, ~transformation-0~ is pushed onto the transformation
  stack and ~layout-1~ is in effect. Please note that transformations are
  bidirectional, i.e. they map old layout positions to new layout ones and
  vice versa, as required. The "backward" direction (~layout-n+1~ =>
  ~layout-n~) is called ~to-graph~ direction (leading towards the underlying
  graph), and the "forward" direction (~layout-n~ => ~layout-n+1~) is called
  ~to-grid~ direction (leading towards the user-visible UI grid).

** Low-level transformations

   Let's start with cell insertion, considering the addition of a single cell
   at position 2. Using the initial cell positions as identifiers (and ~*~ for
   the new cell), we can depict the relation between the two layouts:
   #+BEGIN_SRC text
(layout 0) 0 1 2 3 4 5 6 7 ...
	   | |  \ \ \ \ \ \
(layout 1) 0 1 * 2 3 4 5 6 7 ...
   #+END_SRC
   If we now distribute the layout number over the cells to form ~[<layout>
   <position>]~ pairs and horizontally align the same cells, the mapping
   between the before (0) and after (1) layouts becomes:
   #+BEGIN_SRC text
[0 0] [0 1]  nil  [0 2] [0 3] [0 4] [0 5] [0 6] [0 7]
[1 0] [1 1] [1 2] [1 3] [1 4] [1 5] [1 6] [1 7] [1 8]
   #+END_SRC

   Similarly for the deletion of the cell at position 2:
   #+BEGIN_SRC text
(layout 0) 0 1 2 3 4 5 6 7 8 ...
	   | |  / / / / / /
(layout 1) 0 1 2 3 4 5 6 7 ...
   #+END_SRC
   And the ~[<layout> <position>]~ pair mapping:
   #+BEGIN_SRC text
[0 0] [0 1] [0 2] [0 3] [0 4] [0 5] [0 6] [0 7] [0 8]
[1 0] [1 1]  nil  [1 2] [1 3] [1 4] [1 5] [1 6] [1 7]
   #+END_SRC

   Finally, consider moving the cell at position 2 one position to the right:
   #+BEGIN_SRC text
(layout 0) 0 1 2 3 4 5 6 7 8 ...
	   | |  X  | | |  |  |
(layout 1) 0 1 3 2 4 5 6 7 8...
   #+END_SRC
   And the ~[<layout> <position>]~ pair mapping:
   #+BEGIN_SRC text
[0 0] [0 1] [0 2] [0 3] [0 4] [0 5] [0 6] [0 7] [0 8]
[1 0] [1 1] [1 3] [1 2] [1 4] [1 5] [1 6] [1 7] [1 8]
   #+END_SRC

   TODO: Merge path concept explanation and code for ~split~, ~dead-end~ and
   ~cross~ into the above cases.

** Bidirectional transformations
   Highlight symmetries (including ~normalize-move~) and construction of
   bidirectional transformations by ~make-transformation~.

* Tracing paths through the transformation stack
  Describe logic/algorithm/cases of ~grid->graph~ and ~graph->grid~. Emphasize
  how ~enable~ and ~disable~ are well-behaved wrt them using a
  non-hierarchical undo example.

* Multiple spatial dimensions

** Pairing functions
   Explain pairing functions and how they provide a basis for node id
   generation.

** Implementation
   Describe ~pair~ and ~unpair~ (principle, gotchas, etc.)

* Assembling the pieces

** Spec
   Description and justification and adjustable declarations (such as node id
   type -- it may be very easily converted to a string, for example) in the
   ~spec~.

** Public API
   We need to appropriately generalize it first; possibly add a function that
   constructs encoders/decoders based on a dimensions specification. Also
   cover ~undo~, ~redo~ here (operation trail, etc).

* Parting thoughts
  Emphasize the simplicity of this pure, representation-based solution (as
  opposed to a stateful, model-based one) for implementing cell identity and
  serves towards decoupling application state from UI. Hint at possible
  pairing optimization by ordering of dimensions and/or multi-way byte
  interleaving. Point to test suite.
