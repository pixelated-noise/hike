(require '[cognitect.transcriptor :as xr :refer [check!]]
         '[clojure.math.combinatorics :as comb]
         '[sherpa.core :as sut :refer :all])

;;; Bindings to private definitions
(def make-transformation (deref (var sut/make-transformation)))
(def to-graph (deref (var sut/to-graph)))
(def to-grid (deref (var sut/to-grid)))
(def disable (deref (var sut/disable)))
(def enable (deref (var sut/enable)))
(def push (deref (var sut/push)))
(def make-transformation-stack (deref (var sut/make-transformation-stack)))

;;; Insertion creates an to-graph dead-end and a to-grid split. Asking for the
;;; coordinates of the cells 1-10 after inserting 4 new ones at position 2
;;; (i.e. the first new cell will be at 2).
(map (-> {:action :insert :index 2 :count 4}
         make-transformation
         :to-grid)
     (range 1 11))

;;; The cell at 1 is there, all the rest are moved 4 slots to the right
(check! #{[1 6 7 8 9 10 11 12 13 14]})

;;; The same insertion as above (4 new cells at 2), but now asking for the
;;; *old* coordinates of cells 1-10 in the *new* grid.
(map (-> {:action :insert :index 2 :count 4}
         make-transformation
         :to-graph)
     (range 1 11))

;;; The cell at 1 is unchanged, the next 4 (new) cells cause early exit
;;; (`nil`) and the rest correspond to 4 positions to the left.
(check! #{[1 nil nil nil nil 2 3 4 5 6]})


;;; Removal creates a to-graph split and a to-grid dead-end. Asking for the
;;; coordinates of the cells 1-10 after removing 2 at position 4 (i.e. the
;;; first new cell will be at 2).
(map (-> {:action :remove :index 4 :count 2}
         make-transformation
         :to-grid)
     (range 1 11))

;;; The cells at 1-3 are unchanged, the next 2 cells cause early exit (`nil`)
;;; and the rest correspond to 2 positions to the left.
(check! #{[1 2 3 nil nil 4 5 6 7 8]})

;;; The same removal as above (2 cells at 4), but now asking for the *old*
;;; coordinates of cells 1-10 in the *new* grid.
(map (-> {:action :remove :index 4 :count 2}
         make-transformation
         :to-graph)
     (range 1 11))

;;; The cells at 1-3 unchanged, all the rest are moved 2 slots to the left.
(check! #{[1 2 3 6 7 8 9 10 11 12]})


;;; Moving cells around is equivalent to a transposition of two groups of
;;; cells for both directions. We will move the cells 7-9 5 positions to the
;;; left.
(map (-> {:action :move :index 7 :count 3 :offset -5}
         make-transformation
         :to-graph)
     (range 1 11))

;;; Original positions of the first 10 cells as found in the new grid
(check! #{[1 7 8 9 2 3 4 5 6 10]})

(map (-> {:action :move :index 7 :count 3 :offset -5}
         make-transformation
         :to-grid)
     (range 1 11))

;;; Coordinates of the cells 1-10 (in their original order)
(check! #{[1 5 6 7 8 9 2 3 4 10]})

;;; Same tests for the equivalent operation of moving cells 2-6 3 positions to
;;; the right
(map (-> {:action :move :index 2 :count 5 :offset 3}
         make-transformation
         :to-graph)
     (range 1 11))

;;; Original positions of the first 10 cells as found in the new grid
(check! #{[1 7 8 9 2 3 4 5 6 10]})

(map (-> {:action :move :index 2 :count 5 :offset 3}
         make-transformation
         :to-grid)
     (range 1 11))

;;; Coordinates of the cells 1-10 (in their original order)
(check! #{[1 5 6 7 8 9 2 3 4 10]})


;;; Transformation stacks
(def test-tf-stack
  (-> (make-transformation-stack)
      (push {:action :insert :index 2 :count 3})
      (push {:action :insert :index 2 :count 3})
      (push {:action :insert :index 2 :count 3})
      (push {:action :insert :index 2 :count 3})
      (push {:action :insert :index 2 :count 3})
      (push {:action :insert :index 2 :count 3})))

;;; Early exits as expected
(map #(to-graph test-tf-stack %) (range 1 25))
(check! #{[[0 1]
           [6 2] [6 3] [6 4]
           [5 2] [5 3] [5 4]
           [4 2] [4 3] [4 4]
           [3 2] [3 3] [3 4]
           [2 2] [2 3] [2 4]
           [1 2] [1 3] [1 4]
           [0 2] [0 3] [0 4] [0 5] [0 6]]})

;;; Round trip leaves input positions intact
(defn round-trip-ok? [tf-stack pos-seq]
  (->> pos-seq
       (map #(to-graph tf-stack %))
       (map #(to-grid tf-stack %))
       (= pos-seq)))

(check! (fn [_] (round-trip-ok? test-tf-stack (range 1 21))))


;;; Grid<->graph transformation scenarios
(def test-tf-stack
  (-> (make-transformation-stack)
      (push {:action :insert
             :index 2
             :count 10})
      (push {:action :remove
             :index 4
             :count 3})))

(check! (fn [_] (every? #(round-trip-ok? % (range 1 25))
                        [test-tf-stack
                         (-> test-tf-stack (disable 0))
                         (-> test-tf-stack (disable 1))
                         (-> test-tf-stack (disable 1) (disable 0))
                         (-> test-tf-stack (disable 0) (disable 1))])))

;;; Let's see how deactivation of nodes (via disable) is handled. Before
;;; insertion, we get the to-graph mapping:
(map #(to-graph test-tf-stack %) (range 1 11))
(check! #{[[0 1] [1 2] [1 3] [1 7] [1 8] [1 9] [1 10] [1 11] [0 2] [0 3]]})


;;; Scenario 1: Disable removal

;;; If we disable the removal, we get the following mapping:
(map #(to-graph (disable test-tf-stack 1) %) (range 1 11))
(check! #{[[0 1] [1 2] [1 3] [1 4] [1 5] [1 6] [1 7] [1 8] [1 9] [1 10]]})

;;; Before the disable, nodes [1 4], [1 5] and [1 6] were inactive...
(check! (fn [_]
          (= (map #(to-grid test-tf-stack %)
                  [[1 3] [1 4] [1 5] [1 6] [1 7]])
             [3 nil nil nil 4])))

;;; ... but if any one of them corresponded to a slice edge, we could have
;;; specified the appropriate bypass direction to obtain appropriate results.
(check! (fn [_]
          (= (map #(to-grid test-tf-stack % :min)
                  [[1 3] [1 4] [1 5] [1 6] [1 7]])
             [3 3 3 3 4])))

(check! (fn [_]
          (= (map #(to-grid test-tf-stack % :max)
                  [[1 3] [1 4] [1 5] [1 6] [1 7]])
             [3 4 4 4 4])))

;;; After the removal disable, these nodes return back to their place:
(check! (fn [_] (= (map #(to-grid (disable test-tf-stack 1) %)
                        [[1 3] [1 4] [1 5] [1 6] [1 7]])
                   [3 4 5 6 7])))


;;; Scenario 2: Disable insertion

;;; If we disable the insertion, we get the following mapping (note that no
;;; nodes in layout 1 are seen from the (top-level) layout 2):
(map #(to-graph (disable test-tf-stack 0) %) (range 1 11))
(check! #{[[0 1] [0 2] [0 3] [0 7] [0 8] [0 9] [0 10] [0 11] [0 12] [0 13]]})

;;; The (inactive) layout 1 nodes are now mapped to nowhere:
(check! (fn [_] (->> (range 1 25)
                     (map #(-> test-tf-stack
                               (disable 0)
                               (to-grid [1 %])))
                     (every? nil?))))

;;; Not so for the (original) layout 0:
(map #(-> test-tf-stack
          (disable 0)
          (to-grid [0 %]))
     (range 1 20))

(check! #{[1 2 3 nil nil nil 4 5 6 7 8 9 10 11 12 13 14 15 16]})

;;; Still, if any node of the deactivated layout 1 is a slice edge, we can
;;; meaningfully resolve it to positions in the current toplevel layout by
;;; specifying a bypass direction (note the removal higher in the
;;; transformation stack):
(map #(-> test-tf-stack
          (disable 0)
          (to-grid [1 %] :min))
     (range 1 25))
(check! #{[1 1 1 1 1 1 1 1 1 1 1 2 3 3 3 3 4 5 6 7 8 9 10 11]})

(map #(-> test-tf-stack
          (disable 0)
          (to-grid [1 %] :max))
     (range 1 25))
(check! #{[1 2 2 2 2 2 2 2 2 2 2 2 3 4 4 4 4 5 6 7 8 9 10 11]})


;;; Scenario 3: Individual disable and slices

;;; Let's remember the nodes corresponding to the first positions:
(map #(to-graph test-tf-stack %) (range 1 11))
(check! #{[[0 1] [1 2] [1 3] [1 7] [1 8] [1 9] [1 10] [1 11] [0 2] [0 3]]})

;;; After both the insertion and removal, we refer to the 2:5 slice...
(map #(to-graph test-tf-stack %) (range 2 6))
(check! #{[[1 2] [1 3] [1 7] [1 8]]})

;;; ... and sure enough, the reverse mapping is preserved:
(map #(to-grid test-tf-stack %) [[1 2] [1 3] [1 7] [1 8]])
(check! #{(range 2 6)})

;;; If we disable the removal (which removed the nodes [1 4] [1 5] and [1 6])
;;; and query that slice's edges, the unremoved cells resurface:
[(-> test-tf-stack (to-grid [1 2] :max))
 (-> test-tf-stack (to-grid [1 8] :min))]
(check! #{[2 5]})

[(-> test-tf-stack (disable 1) (to-grid [1 2] :max))
 (-> test-tf-stack (disable 1) (to-grid [1 8] :min))]
(check! #{[2 8]})

;;; If we disable the insertion (which inserted all of the slice nodes) and
;;; query for the slice edges, we get an empty position interval (init > term)
[(-> test-tf-stack (disable 0) (to-grid [1 2] :max))
 (-> test-tf-stack (disable 0) (to-grid [1 8] :min))]
(check! #{[2 1]})

[(-> test-tf-stack (disable 1) (disable 0) (to-grid [1 2] :max))
 (-> test-tf-stack (disable 1) (disable 0) (to-grid [1 8] :min))]
(check! #{[2 1]})

;;; Slice from initial layout origin to a inserted, then removed cell (0 =
;;; insertion, 1 = removal):
[(-> test-tf-stack (to-grid [0 1] :max))
 (-> test-tf-stack (to-grid [1 5] :min))]
(check! #{[1 3]})

[(-> test-tf-stack (disable 1) (to-grid [0 1] :max))
 (-> test-tf-stack (disable 1) (to-grid [1 5] :min))]
(check! #{[1 5]})

[(-> test-tf-stack (disable 0) (to-grid [0 1] :max))
 (-> test-tf-stack (disable 0) (to-grid [1 5] :min))]
(check! #{[1 1]})

[(-> test-tf-stack (disable 1) (disable 0) (to-grid [0 1] :max))
 (-> test-tf-stack (disable 1) (disable 0) (to-grid [1 5] :min))]
(check! #{[1 1]})


;;; Scenario 4: Non-hierarchical disable behavior

;;; Slice in the initial layout outside the affected region:
[(-> test-tf-stack (to-grid [0 4] :max))
 (-> test-tf-stack (to-grid [0 6] :min))]
(check! #{[11 13]})

;;; Undid removal
[(-> test-tf-stack (disable 1) (to-grid [0 4] :max))
 (-> test-tf-stack (disable 1) (to-grid [0 6] :min))]
(check! #{[14 16]})

;;; Undid both insertion and removal
[(-> test-tf-stack (disable 0) (disable 1) (to-grid [0 4]))
 (-> test-tf-stack (disable 0) (disable 1) (to-grid [0 6]))]
(check! #{[4 6]})

;;; Undid insertion only: removal removes initial layout cells instead of the
;;; inserted ones (which are deactivated)
(map #(to-graph (disable test-tf-stack 0) %) (range 1 11))
(check! #{[[0 1] [0 2] [0 3] [0 7] [0 8] [0 9] [0 10] [0 11] [0 12] [0 13]]})

[(-> test-tf-stack (disable 0) (to-grid [0 4]))
 (-> test-tf-stack (disable 0) (to-grid [0 6]))]
(check! #{[nil nil]})

[(-> test-tf-stack (disable 0) (to-grid [0 4] :max))
 (-> test-tf-stack (disable 0) (to-grid [0 6] :min))]
(check! #{[4 3]})

[(-> test-tf-stack (disable 0) (to-grid [0 4] :max))
 (-> test-tf-stack (disable 0) (to-grid [0 7] :min))]
(check! #{[4 4]})


;;; Nodes, cells and slices
(def test-chart
  (-> (make-chart {:dimensions [:row :col]})
      (operate :row {:action :insert :index 2 :count 10})
      (operate :row {:action :remove :index 4 :count 3})
      (operate :col {:action :move :index 8 :count 10 :offset -3})
      (operate :col {:action :remove :index 4 :count 3})))

(defn cell-range [[fr fc] [tr tc]]
  (set (comb/cartesian-product (range fr (inc tr)) (range fc (inc tc)))))


;;; Node->cell conversion
(node->cell [[0 5] [0 5]] test-chart)
(check! #{[12 12]})

(node->cell [[0 5] [0 5]]
            (-> test-chart
                ;; disable removals
                (update-in [:transformations 0] disable 1)
                (update-in [:transformations 1] disable 1)))
(check! #{[15 15]})

;;; The node vanishes if we disable the row insertion, the col move, or both
;;; (its cell is subsequently removed -- this is a case of non-hierarchical
;;; disable)
(map (partial node->cell [[0 5] [0 5]])
     [(update-in test-chart [:transformations 0] disable 0)
      (update-in test-chart [:transformations 1] disable 0)
      (-> test-chart
          (update-in [:transformations 0] disable 0)
          (update-in [:transformations 1] disable 0))])
(check! #(every? nil? %))


;;; Cell->node conversion
(map #(cell->node % test-chart) [[1 1] [12 12]])
(check! #{[[[0 1] [0 1]] [[0 5] [0 5]]]})

(map #(cell->node % (-> test-chart
                        ;; disable removals
                        (update-in [:transformations 0] disable 1)
                        (update-in [:transformations 1] disable 1)))
     [[1 1] [15 15]])
(check! #{[[[0 1] [0 1]] [[0 5] [0 5]]]})


;;; Slices
(slice-nodes->cells {:start [[0 1] [0 1]]
                     :end   [[0 2] [0 5]]}
                    test-chart)
(check! #(= (cell-range [1 1] [9 12]) (set %)))

(slice-nodes->cells {:start [[0 1] [0 1]]
                     :end   [[0 2] [0 5]]}
                    (-> test-chart
                        ;; disable removals
                        (update-in [:transformations 0] disable 1)
                        (update-in [:transformations 1] disable 1)))
(check! #(= (cell-range [1 1] [12 15]) (set %)))

(slice-nodes->cells {:start [[0 1] [0 1]]
                     :end   [[0 2] [0 5]]}
                    (-> test-chart
                        ;; disable insertion
                        (update-in [:transformations 0] disable 0)
                        ;; disable move (essentially insertion to slice)
                        (update-in [:transformations 1] disable 0)))
(check! #(= (cell-range [1 1] [2 3]) (set %)))


;;; High-level interface and undo/redo
(defn show-statuses [{:keys [transformations trail]}]
  {:row (mapv :active (nth transformations 0))
   :col (mapv :active (nth transformations 1))
   :last (:last-active trail)})

(def test-chart
  (-> (make-chart {:dimensions [:row :col]})
      (operate :col {:action :insert :index 2 :count 3})
      (operate :row {:action :move :index 3 :count 4 :offset 5})
      (operate :col {:action :remove :index 9 :count 2})
      (operate :row {:action :insert :index 8 :count 4})))

(check! (fn [_]
          (let [undone (->> test-chart (iterate undo) (take 5) reverse)]
            (= undone (->> undone first (iterate redo) (take 5))))))

(->> test-chart (iterate undo) (take 6) (map show-statuses))
(check! #{[{:row [true  true]  :col [true  true]  :last 3}
           {:row [true  false] :col [true  true]  :last 2}
           {:row [true  false] :col [true  false] :last 1}
           {:row [false false] :col [true  false] :last 0}
           {:row [false false] :col [false false] :last -1}
           {:row [false false] :col [false false] :last -1}]})

(->> test-chart
     (iterate undo) (drop 6) first
     (iterate redo) (take 6)
     (map show-statuses))
(check! #{[{:row [false false] :col [false false] :last -1}
           {:row [false false] :col [true false]  :last 0}
           {:row [true false]  :col [true false]  :last 1}
           {:row [true false]  :col [true true]   :last 2}
           {:row [true true]   :col [true true]   :last 3}
           {:row [true true]   :col [true true]   :last 3}]})

;;; New operations discard undone ones
(-> test-chart undo undo redo
    (operate :col {:action :move :index 8 :count 2 :offset -3})
    (operate :row {:action :remove :index 5 :count 1})
    ;; no amount of `redo` can bring back the undone row operation
    redo redo redo redo redo redo
    ((juxt show-statuses :trail)))
(check! #{[{:row [true false true] :col [true true true] :last 4}
           {:operation-pointers [[1 0] [0 0] [1 1] [1 2] [0 2]]
            :last-active        4}]})
